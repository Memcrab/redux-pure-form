(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var FIELD_ON_CHANGE = exports.FIELD_ON_CHANGE = 'FIELD_ON_CHANGE';

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFormReducer = exports.formReducer = exports.mergeActionsToProps = exports.formActions = exports.formActionTypes = undefined;

var _actionTypes = __webpack_require__(0);

var types = _interopRequireWildcard(_actionTypes);

var _actions = __webpack_require__(2);

var actions = _interopRequireWildcard(_actions);

var _attributes = __webpack_require__(3);

var _attributes2 = _interopRequireDefault(_attributes);

var _reducer = __webpack_require__(4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

exports.formActionTypes = types;
exports.formActions = actions;
exports.mergeActionsToProps = _attributes2.default;
exports.formReducer = _reducer.formReducer;
exports.createFormReducer = _reducer.createFormReducer;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onChange = onChange;

var _actionTypes = __webpack_require__(0);

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var INPUT_CHECKBOX = 'checkbox';
var INPUT_SELECT_MULTIPLE = 'select-multiple';
var INPUT = 'input';
var INPUT_RADIO = 'radio';
var INPUT_SELECT = 'select-one';

function getFieldValue(target) {
  if (target.type === INPUT_CHECKBOX) {
    if (target.name.endsWith('[]')) {
      return target.value;
    }

    switch (true) {
      case target.value === 'true':
        return target.checked;
      case target.value === '1':
        return target.checked ? 1 : 0;
      default:
        return target.checked ? target.value : null;
    }
  }

  if (target.type === INPUT_SELECT_MULTIPLE) {
    var values = Array.prototype.reduce.call(target.options, function (acc, option) {
      if (option.selected) {
        return acc.concat(option.value);
      }
      return acc;
    }, []);
    return values;
  }

  // radio
  // condition for react native elements
  return target.value;
}

function getFiedlsFromEvent(e) {
  var target = e.currentTarget;
  var name = target.name;
  var value = getFieldValue(target);
  return _defineProperty({}, name, value);
}

function onChange(name, value) {
  var fields = {};

  switch (true) {
    // event
    case Boolean(typeof name === 'object' && name.type && name.target):
      fields = getFiedlsFromEvent(name);
      break;
    // name and value as args
    case Boolean(typeof name === 'string' && typeof value !== 'undefined'):
      fields = _defineProperty({}, name, value);
      break;
    // multiple fields object
    case Boolean(typeof name === 'object' && typeof value === 'undefined'):
      fields = name;
      break;
    default:
      console.warn('WARNING, not handled event in onChange');
      break;
  }

  return {
    type: _actionTypes.FIELD_ON_CHANGE,
    payload: fields
  };
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultAttrs = ['onChange'];
var attrsActionsRels = {
  onChange: 'onChange'
};

function mapActionsToAttrs(actions) {
  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultAttrs;

  return attrs.reduce(function (acc, attr) {
    return _extends({}, acc, _defineProperty({}, attr, actions[attrsActionsRels[attr]]));
  }, {});
}

function mergeActionsToProps(stateProps, dispatchProps, ownProps) {
  return Object.assign({}, ownProps, stateProps, dispatchProps, {
    fieldAttrs: mapActionsToAttrs(dispatchProps)
  });
}

exports.default = mergeActionsToProps;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.formReducer = formReducer;
exports.createFormReducer = createFormReducer;

var _actionTypes = __webpack_require__(0);

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// ensure the keys being passed is an array of key paths
// example: 'a.b' becomes ['a', 'b'] unless it was already ['a', 'b']
var keys = function keys(ks) {
  return Array.isArray(ks) ? ks : ks.split('.');
};

// traverse the set of keys left to right,
// returning the current value in each iteration.
// if at any point the value for the current key does not exist,
// return the default value
var deepGet = function deepGet(o, kp, d) {
  return keys(kp).reduce(function (o, k) {
    return o && o[k] || d;
  }, o);
};

/**
 * traverse the set of keys right to left,
 * returning a new object containing both properties from the object
 * we were originally passed and our new property.
 * Example:
 * If o = { a: { b: { c: 1 } } }
 * deepSet(o, ['a', 'b', 'c'], 2) will progress thus:
 * 1. c = Object.assign({}, {c: 1}, { c: 2 })
 * 2. b = Object.assign({}, { b: { c: 1 } }, { b: c })
 * 3. returned = Object.assign({}, { a: { b: { c: 1 } } }, { a: b })
 * @param  {object} o  [description]
 * @param  {string} kp [description]
 * @param  {any} v     [description]
 * @return {object}    [description]
 */
var deepSet = function deepSet(o, kp, v) {
  return keys(kp).reduceRight(function (v, k, i, ks) {
    return Object.assign({}, deepGet(o, ks.slice(0, i)), _defineProperty({}, k, v));
  }, v);
};

function getComplexValue(value) {
  if (value !== null && typeof value === 'object' && typeof value.value !== 'undefined') {
    if (typeof value.parser === 'function') {
      return value.parser(value.value);
    }
    return value.value;
  }
  return value;
}

function getNextValue(name, nameInReducer, newState, action) {
  var value = deepGet(newState, nameInReducer) || [];
  var valueFromAction = getComplexValue(action.payload[name]);
  var index = value.indexOf(valueFromAction);
  var nextValue = index > -1 ? value.slice(0, index).concat(value.slice(index + 1)) : value.concat(valueFromAction);
  return nextValue;
}

function formReducer(formName) {
  var defaultState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;
    var action = arguments[1];

    switch (action.type) {
      case _actionTypes.FIELD_ON_CHANGE:
        var newState = state;
        var fields = Object.keys(action.payload);
        fields.forEach(function (name) {
          if (name.startsWith(formName + '.') || name === formName) {
            if (name.endsWith('[]')) {
              var nameInReducer = name.slice(0, -2);
              var nextValue = getNextValue(name, nameInReducer, newState, action);
              newState = deepSet(newState, nameInReducer, nextValue);
            } else {
              newState = deepSet(newState, name, getComplexValue(action.payload[name]));
            }
          }
        });
        return newState;
      default:
        return state;
    }
  };
}

function createFormReducer(formName) {
  var defaultState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;
    var action = arguments[1];

    switch (action.type) {
      case _actionTypes.FIELD_ON_CHANGE:
        var newState = state;
        var fields = Object.keys(action.payload);
        if (fields[0] === formName) {
          return _extends({}, action.payload[formName]);
        }
        fields.forEach(function (name) {
          if (name.startsWith(formName + '.') || name === formName) {
            var nameInReducer = name.slice(formName.length + 1);
            if (name.endsWith('[]')) {
              nameInReducer = nameInReducer.slice(0, -2);
              var nextValue = getNextValue(name, nameInReducer, newState, action);
              newState = deepSet(newState, nameInReducer, nextValue);
            } else {
              newState = deepSet(newState, nameInReducer, getComplexValue(action.payload[name]));
            }
          }
        });
        return newState;
      default:
        return state;
    }
  };
}

/***/ })
/******/ ]);
});